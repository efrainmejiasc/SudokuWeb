{"version":3,"sources":["settings/_fonts.scss","settings/_global.scss","tools/_functions.scss","elements/_list.scss","elements/_form.scss","elements/_anchor.scss","components/navbar.scss","settings/_vars.scss","components/video.scss","tools/_breakpoints.scss","main.scss"],"names":[],"mappings":"AACA,WACE,mBAAqB,AAErB,oBAAoB,AAEpB,kBADA,AACkB,gBAHlB,AAEgB,kDAFqC,CAGnC,AAIpB,WACE,kBAAoB,AAEpB,oBAAoB,AAEpB,kBADA,AACkB,gBAHlB,AAEgB,mDAFsC,CAGpC,AAIpB,WACE,sBAAwB,AAExB,oBAAoB,AAEpB,kBADA,AACkB,gBAHlB,AAEgB,uDAF0C,CAGxC,AAIpB,WACE,sBAAwB,AAExB,oBAAoB,AAEpB,kBADA,AACkB,gBAHlB,AAEgB,oDAFuC,CAGrC,ACrBpB,KACE,8BAAA,AAAsB,sBAAA,AACtB,cCVqB,CDWtB,AAGD,iBAGE,2BAAA,AAAmB,kBAAA,CACpB,AAGD,KAaI,kCADA,AACkC,mCATpC,AAQqC,mBArCxB,AAkCb,cAHA,AA9Ba,mBAGU,AA4BvB,gBA3B2B,AA4B3B,gBAPA,AApBqB,SAoBZ,AACT,SAAU,CAaX,AAED,IAQE,+BANA,AAM+B,qBANV,AAKrB,YADA,AACY,eAJZ,AAGe,qBAHO,CAMvB,AAGD,SAGE,gBAFA,AA9Ce,YA8CH,AACZ,eAAgB,CAEjB,AAGD,OACE,8BAAsB,AAEtB,gBAFA,AArDe,sBAqDO,AACtB,UAAW,CAEZ,AAID,6GAKI,wBAA0B,CAC3B,AAIH,OAGE,qBAAA,AAAgB,wBAAhB,AAAgB,gBAAA,AAGhB,uBAFA,AAEuB,SAFd,AACT,gBA3Ee,AA8Ef,YADA,AA5EyB,cAsEzB,AAMc,UANJ,AACV,SAAU,CAOX,AAGD,IACE,aAAc,CACf,AAGD,sCAKE,mBAAoB,CACrB,AEtGD,MAGE,eAAgB,CAEjB,ACLD,WDEE,SAAS,AAET,SAAU,CCDX,ACHD,EACE,oBAAqB,CACtB,ACFD,yBAMI,sBAAmB,AACnB,sBADA,AAC8B,yBADX,AACnB,yBADA,AAC8B,mBAF9B,AACmB,oBADnB,AAAa,oBAAb,AAAa,aAAA,AAEb,8BAJA,AAI8B,cAL9B,AACc,kBCHiB,ADI/B,kBAAoB,CAyBrB,AA7BH,4CAUQ,WAAY,CACb,AAXP,uFAkBQ,oBAAA,AAAa,oBAAb,AAAa,YAAA,CAMd,AAxBP,iEAoBU,iBAAkB,CAGnB,AAvBT,yDA0BQ,WAAY,CACb,AE3BP,OAGE,sBADA,AACmB,qBADI,AACvB,yBADA,AACmB,wBADI,AACvB,mBAFA,AAEmB,oBAFnB,AAAa,oBAAb,AAAa,aAAA,AACb,sBAAuB,CAuBxB,AAzBD,wBAMI,cADA,AACc,kBDNiB,ACO/B,cAAe,CAiBhB,AC4IG,mCDpKN,wBASM,SAAU,CAeb,CAAA,AAxBH,yCAaM,mBADA,AACmB,iBADD,CAWnB,AAvBL,gDAkBQ,SAAS,AAET,YADA,AACY,OALZ,AAIO,kBAJW,AAElB,QADA,AACQ,MADF,AAKN,UAAW,CACZ,AENP,WACE,sBAAwB,CACzB","file":"main.css","sourcesContent":["// for regular text\n@font-face {\n  font-family: 'Barlow';\n  src: url('fonts/Barlow-Light.ttf') format('truetype');\n  font-stretch: normal;\n  font-weight: 300;\n  font-style: normal;\n}\n\n// for sub-headings\n@font-face {\n  font-family: 'Khand';\n  src: url('fonts/Khand-Regular.ttf') format('truetype');\n  font-stretch: normal;\n  font-weight: 400;\n  font-style: normal;\n}\n\n// for headings\n@font-face {\n  font-family: 'Syncopate';\n  src: url('fonts/Syncopate-Regular.ttf') format('truetype');\n  font-stretch: normal;\n  font-weight: 400;\n  font-style: normal;\n}\n\n// for headings\n@font-face {\n  font-family: 'Syncopate';\n  src: url('fonts/Syncopate-Bold.ttf') format('truetype');\n  font-stretch: normal;\n  font-weight: 700;\n  font-style: normal;\n}\n","$white: #fefefe !default;\n$black: #0a0a0a !default;\n$global-font-size: 100% !default;\n$body-background: $white !default;\n$body-font-family: Barlow !default;\n$global-weight-normal: normal !default;\n$global-lineheight: 1.5 !default;\n$body-font-color: $black !default;\n$body-antialiased: true !default;\n$global-radius: 0 !default;\n$global-button-cursor: auto !default;\n\nhtml {\n  box-sizing: border-box;\n  font-size: $global-font-size;\n}\n\n// Set box-sizing globally to handle padding and border widths\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n// Default body styles\nbody {\n  margin: 0;\n  padding: 0;\n\n  background: $body-background;\n\n  font-family: $body-font-family;\n  font-weight: $global-weight-normal;\n  line-height: $global-lineheight;\n  color: $body-font-color;\n\n  @if ($body-antialiased) {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n}\n\nimg {\n  // Get rid of gap under images by making them display: inline-block; by default\n  display: inline-block;\n  vertical-align: middle;\n\n  // Grid defaults to get images and embeds to work properly\n  max-width: 100%;\n  height: auto;\n  -ms-interpolation-mode: bicubic;\n}\n\n// Make sure textarea takes on height automatically\ntextarea {\n  height: auto;\n  min-height: 50px;\n  border-radius: $global-radius;\n}\n\n// Make select elements are 100% width by default\nselect {\n  box-sizing: border-box;\n  width: 100%;\n  border-radius: $global-radius;\n}\n\n// Styles Google Maps and MapQuest embeds properly\n// sass-lint:disable-line no-ids\n.map_canvas,\n.mqa-display {\n  img,\n  embed,\n  object {\n    max-width: none !important;\n  }\n}\n\n// Reset <button> styles created by most browsers\nbutton {\n  outline: 0;\n  padding: 0;\n  appearance: none;\n  border: 0;\n  border-radius: $global-radius;\n  background: transparent;\n  line-height: 1;\n  cursor: $global-button-cursor;\n}\n\n// Prevent text overflow on pre\npre {\n  overflow: auto;\n}\n\n// Make reset inherit font-family instead of settings sans-serif\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n}\n","////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now lets convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: ($value / 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return strip-unit($value) / strip-unit($base);\n  }\n\n  // assume that line-heights greatern then 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return $value / strip-unit($base);\n  }\n\n  @return $value;\n}","ul,\nol {\n  margin: 0;\n  list-style: none;\n  padding: 0;\n}\n","form {\n  margin: 0;\n  padding: 0;\n}\n","a {\n  text-decoration: none;\n}\n",".navbar {\n  .inner-container {\n    max-width: $inner-container-max-width;\n    margin: 0 auto;\n    padding: 0.5rem 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    .column-alfa {\n      .logo {\n        width: 150px;\n      }\n      .username {\n      }\n    }\n    .column-beta {\n      display: flex;\n      .menu-list {\n        display: flex;\n        > .menu-list-item {\n          margin-right: 2rem;\n          > .button {\n          }\n        }\n      }\n      .language-selector {\n        width: 100px;\n      }\n    }\n  }\n}\n","$inner-container-max-width: 87.5rem;\n",".video {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .inner-container {\n    max-width: $inner-container-max-width;\n    margin: 0 auto;\n    padding: 2rem 0;\n    @include breakpoint(medium) {\n      width: 50%;\n    }\n    .video-container {\n      position: relative;\n      padding-top: 56.25%; /* = (height(px)x100)/width(px)*/\n      .video {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n      }\n    }\n  }\n}\n","////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'Your smallest breakpoint (defined in $breakpoints) must be set to \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - (1/16);\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  @if $old-zf-size != null {\n    // Restore the old breakpoint size\n    $-zf-size: $old-zf-size !global;\n  } @else {\n    $-zf-size: null !global;\n  }\n}\n\n/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoing - a named or non-named breakpoing.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","@import 'tools/functions';\n@import 'tools/breakpoints';\n@import 'tools/mixins';\n\n@import 'settings/vars';\n@import 'settings/fonts';\n@import 'settings/colors';\n@import 'settings/global';\n\n@import 'elements/list';\n@import 'elements/form';\n@import 'elements/anchor';\n\n@import 'components/navbar';\n@import 'components/video';\n\n.is-hidden {\n  display: none !important;\n}\n"]}